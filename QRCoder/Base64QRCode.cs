using System.Drawing;
using System.Runtime.InteropServices;
using static QRCoder.Base64QRCode;
using static QRCoder.QRCodeGenerator;

namespace QRCoder;

/// <summary>
/// Represents a QR code generator that outputs base64-encoded images.
/// </summary>
public class Base64QRCode : AbstractQRCode, IDisposable
{
    /// <summary>
    /// Initializes a new instance of the <see cref="Base64QRCode"/> class.
    /// Constructor without parameters to be used in COM objects connections.
    /// </summary>
    public Base64QRCode()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Base64QRCode"/> class with the specified <see cref="QRCodeData"/>.
    /// </summary>
    /// <param name="data"><see cref="QRCodeData"/> generated by the QRCodeGenerator.</param>
    public Base64QRCode(QRCodeData data) : base(data)
    {
    }

    /// <summary>
    /// Returns a base64-encoded string that contains the resulting QR code as a PNG image.
    /// </summary>
    /// <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
    /// <returns>Returns the QR code graphic as a base64-encoded string.</returns>
    public string GetGraphic(int pixelsPerModule)
        => GetGraphic(pixelsPerModule, Color.Black, Color.White, true);

    /// <summary>
    /// Returns a base64-encoded string that contains the resulting QR code as a PNG image.
    /// </summary>
    /// <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
    /// <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
    /// <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
    /// <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
    /// <returns>Returns the QR code graphic as a base64-encoded string.</returns>
    public string GetGraphic(int pixelsPerModule, string darkColorHtmlHex, string lightColorHtmlHex, bool drawQuietZones = true)
        => GetGraphic(pixelsPerModule, ColorTranslator.FromHtml(darkColorHtmlHex), ColorTranslator.FromHtml(lightColorHtmlHex), drawQuietZones);

    /// <summary>
    /// Returns a base64-encoded string that contains the resulting QR code as an image.
    /// </summary>
    /// <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
    /// <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
    /// <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
    /// <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
    /// <param name="imgType">The type of image to generate (PNG, JPEG, GIF).</param>
    /// <returns>Returns the QR code graphic as a base64-encoded string.</returns>
    [Obsolete("The imgType parameter is obsolete. Only PNG format is supported. Use the overload without the imgType parameter.")]
    public string GetGraphic(int pixelsPerModule, string darkColorHtmlHex, string lightColorHtmlHex, bool drawQuietZones, ImageType imgType)
        => GetGraphic(pixelsPerModule, ColorTranslator.FromHtml(darkColorHtmlHex), ColorTranslator.FromHtml(lightColorHtmlHex), drawQuietZones, imgType);

    /// <summary>
    /// Returns a base64-encoded string that contains the resulting QR code as an image.
    /// </summary>
    /// <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
    /// <param name="darkColor">The color of the dark modules.</param>
    /// <param name="lightColor">The color of the light modules.</param>
    /// <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
    /// <param name="imgType">The type of image to generate (PNG, JPEG, GIF).</param>
    /// <returns>Returns the QR code graphic as a base64-encoded string.</returns>
    [Obsolete("The imgType parameter is obsolete. Only PNG format is supported. Use the overload without the imgType parameter.")]
    public string GetGraphic(int pixelsPerModule, Color darkColor, Color lightColor, bool drawQuietZones, ImageType imgType)
    {
        if (imgType != ImageType.Png)
        {
            throw new NotSupportedException($"Only PNG format is supported. {imgType} format is no longer supported.");
        }

        return GetGraphic(pixelsPerModule, darkColor, lightColor, drawQuietZones);
    }

    /// <summary>
    /// Returns a base64-encoded string that contains the resulting QR code as a PNG image.
    /// </summary>
    /// <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
    /// <param name="darkColor">The color of the dark modules.</param>
    /// <param name="lightColor">The color of the light modules.</param>
    /// <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
    /// <returns>Returns the QR code graphic as a base64-encoded string.</returns>
    public string GetGraphic(int pixelsPerModule, Color darkColor, Color lightColor, bool drawQuietZones = true)
    {
        var pngCoder = new PngByteQRCode(QrCodeData);
        var pngData = pngCoder.GetGraphic(pixelsPerModule, darkColor, lightColor, drawQuietZones);
        return Convert.ToBase64String(pngData, Base64FormattingOptions.None);
    }

    /// <summary>
    /// Specifies the type of image to generate.
    /// </summary>
    [Obsolete("ImageType enum is obsolete. Only PNG format is supported.")]
    public enum ImageType
    {
        /// <summary>
        /// Graphics Interchange Format (GIF) image format, a bitmap image format with limited color support
        /// </summary>
        Gif,
        /// <summary>
        /// Joint Photographic Experts Group (JPEG) image format, a lossy compressed image format
        /// </summary>
        Jpeg,
        /// <summary>
        /// Portable Network Graphics (PNG) image format, a lossless raster graphics format
        /// </summary>
        Png
    }

}

/// <summary>
/// Provides static methods for creating base64-encoded QR codes.
/// </summary>
public static class Base64QRCodeHelper
{
    /// <summary>
    /// Creates a base64-encoded QR code with a single function call.
    /// </summary>
    /// <param name="plainText">The text or payload to be encoded inside the QR code.</param>
    /// <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
    /// <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
    /// <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
    /// <param name="eccLevel">The level of error correction data.</param>
    /// <param name="forceUtf8">Specifies whether the generator should be forced to work in UTF-8 mode.</param>
    /// <param name="utf8BOM">Specifies whether the byte-order-mark should be used.</param>
    /// <param name="eciMode">Specifies which ECI mode should be used.</param>
    /// <param name="requestedVersion">Sets the fixed QR code target version.</param>
    /// <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
    /// <returns>Returns the QR code graphic as a base64-encoded string.</returns>
    public static string GetQRCode(string plainText, int pixelsPerModule, string darkColorHtmlHex, string lightColorHtmlHex, ECCLevel eccLevel, bool forceUtf8 = false, bool utf8BOM = false, EciMode eciMode = EciMode.Default, int requestedVersion = -1, bool drawQuietZones = true)
    {
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(plainText, eccLevel, forceUtf8, utf8BOM, eciMode, requestedVersion);
        using var qrCode = new Base64QRCode(qrCodeData);
        return qrCode.GetGraphic(pixelsPerModule, darkColorHtmlHex, lightColorHtmlHex, drawQuietZones);
    }

    /// <summary>
    /// Creates a base64-encoded QR code with a single function call.
    /// </summary>
    /// <param name="plainText">The text or payload to be encoded inside the QR code.</param>
    /// <param name="pixelsPerModule">The number of pixels each dark/light module of the QR code will occupy in the final QR code image.</param>
    /// <param name="darkColorHtmlHex">The color of the dark modules in HTML hex format.</param>
    /// <param name="lightColorHtmlHex">The color of the light modules in HTML hex format.</param>
    /// <param name="eccLevel">The level of error correction data.</param>
    /// <param name="forceUtf8">Specifies whether the generator should be forced to work in UTF-8 mode.</param>
    /// <param name="utf8BOM">Specifies whether the byte-order-mark should be used.</param>
    /// <param name="eciMode">Specifies which ECI mode should be used.</param>
    /// <param name="requestedVersion">Sets the fixed QR code target version.</param>
    /// <param name="drawQuietZones">Indicates if quiet zones around the QR code should be drawn.</param>
    /// <param name="imgType">The type of image to generate (PNG, JPEG, GIF).</param>
    /// <returns>Returns the QR code graphic as a base64-encoded string.</returns>
    [Obsolete("The imgType parameter is obsolete. Only PNG format is supported. Use the overload without the imgType parameter.")]
    public static string GetQRCode(string plainText, int pixelsPerModule, string darkColorHtmlHex, string lightColorHtmlHex, ECCLevel eccLevel, bool forceUtf8, bool utf8BOM, EciMode eciMode, int requestedVersion, bool drawQuietZones, ImageType imgType)
    {
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(plainText, eccLevel, forceUtf8, utf8BOM, eciMode, requestedVersion);
        using var qrCode = new Base64QRCode(qrCodeData);
        return qrCode.GetGraphic(pixelsPerModule, darkColorHtmlHex, lightColorHtmlHex, drawQuietZones, imgType);
    }
}
